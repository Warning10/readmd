#include<iostream>   // Include necessary header for input/output operations
#include<omp.h>      // Include header for OpenMP parallelization
#include<cstdlib>    // Include for srand and rand
#include<ctime>      // Include for time
using namespace std;

int main() {
    // Prompt user to enter dimensions for matrices
    cout << "Number of rows in first matrix: ";
    int row1;
    cin >> row1;

    cout << "Number of columns in first matrix: ";
    int col1;
    cin >> col1;

    int row2 = col1;  // Number of rows in second matrix is the same as the number of columns in the first matrix

    cout << "Number of columns in second matrix: ";
    int col2;
    cin >> col2;

    cout << endl;
    cout << "Matrix 1:" << endl;

    // Declare and initialize the first matrix
    int mat1[row1][col1];
    srand(time(NULL));  // Seed the random number generator using current time
    for (int i = 0; i < row1; i++) {
        for (int j = 0; j < col1; j++) {
            mat1[i][j] = rand() % 10;  // Generate random numbers between 0 and 9
            cout << mat1[i][j] << " "; // Print the element
        }
        cout << endl;
    }
    cout << endl;

    cout << "Matrix 2:" << endl;

    // Declare and initialize the second matrix
    int mat2[row2][col2];
    for (int i = 0; i < row2; i++) {
        for (int j = 0; j < col2; j++) {
            mat2[i][j] = rand() % 10;  // Generate random numbers between 0 and 9
            cout << mat2[i][j] << " "; // Print the element
        }
        cout << endl;
    }
    cout << endl;

    cout << "Multiplication: " << endl;

    // Declare the resultant matrix
    int mat3[row1][col2];

    // Perform matrix multiplication in parallel
    clock_t start_parallel = clock(); // Record start time
    #pragma omp parallel for
    for (int i = 0; i < row1; i++) {
        #pragma omp parallel for
        for (int j = 0; j < col2; j++) {
            mat3[i][j] = 0; // Initialize the element of the resultant matrix

            int arr[col1];  // Declare an array to store intermediate results

            // Perform element-wise multiplication and store the results in arr
            #pragma omp parallel for
            for (int k = 0; k < col1; k++) arr[k] = mat1[i][k] * mat2[k][j];

            int sum = 0; // Initialize sum to accumulate the results
            // Calculate the sum of elements in arr using reduction
            #pragma omp parallel for reduction(+: sum)
            for (int l = 0; l < col1; l++) sum += arr[l];

            mat3[i][j] = sum; // Assign the sum to the resultant matrix element
        }
    }
    clock_t stop_parallel = clock(); // Record stop time

    // Print the resultant matrix
    cout << "Resultant Matrix:" << endl;
    for (int i = 0; i < row1; i++) {
        for (int j = 0; j < col2; j++) cout << mat3[i][j] << " "; // Print the element
        cout << endl;
    }

    // Print the time required for parallel execution
    cout << "Time required for parallel execution: " << (double)(stop_parallel - start_parallel) << " ms" << endl;

    return 0; // Return 0 to indicate successful termination
}
