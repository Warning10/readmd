#include<iostream>      // Include necessary header for input/output operations
#include<cstdlib>       // Include header for standard library functions
#include<omp.h>         // Include header for OpenMP parallelization
#include<time.h>        // Include header for time-related functions
using namespace std;

// Function to merge two sorted subarrays into a single sorted array
void merge(int array[], int low1, int high1, int low2, int high2, int n) {
    int temp[n];    // Temporary array to store merged subarrays
    int i = low1, j = low2, k = 0;  // Initialize variables for array indices

    // Merge the two subarrays while maintaining sorted order
    while (i <= high1 && j <= high2) {
        if (array[i] < array[j])
            temp[k++] = array[i++];
        else
            temp[k++] = array[j++];
    }

    // Copy the remaining elements of first subarray, if any
    while (i <= high1)
        temp[k++] = array[i++];

    // Copy the remaining elements of second subarray, if any
    while (j <= high2)
        temp[k++] = array[j++];

    // Copy the merged array back to the original array
    for (i = low1, j = 0; i <= high2; i++, j++)
        array[i] = temp[j];
}

// Function to perform merge sort serially
void mergesort_serial(int array[], int low, int high, int n) {
    if (low < high) {
        int mid = (low + high) / 2;  // Calculate mid index
        mergesort_serial(array, low, mid, n);     // Sort first half recursively
        mergesort_serial(array, mid + 1, high, n);    // Sort second half recursively
        merge(array, low, mid, mid + 1, high, n);     // Merge the sorted halves
    }
}

// Function to perform merge sort in parallel
void mergesort_parallel(int array[], int low, int high, int n) {
    if (low < high) {
        int mid = (low + high) / 2;  // Calculate mid index

        // Perform parallel sections for sorting each half independently
        #pragma omp parallel sections
        {
            #pragma omp section
            {
                mergesort_parallel(array, low, mid, n);  // Sort first half
            }
            #pragma omp section
            {
                mergesort_parallel(array, mid + 1, high, n); // Sort second half
            }
        }

        merge(array, low, mid, mid + 1, high, n); // Merge the sorted halves
    }
}

// Function to display array elements
void display(int array[], int n) {
    for (int i = 0; i < n; i++) cout << array[i] << " "; // Print each element of the array
}

// Main function
int main() {
    int n;  // Declare variable to store the number of elements
    cout << "Enter the number of elements : ";  // Prompt user to enter the number of elements
    cin >> n;   // Input the number of elements
    
    int array[n] = {0};    // Declare array of size n to store elements

    // Generate random numbers and fill the array
    srand(time(NULL));  // Seed the random number generator with current time
    for (int i = 0; i < n; i++) {
        array[i] = rand() % 32; // Generate random numbers between 0 and 31
    }
    
    cout << "Original Array: ";
    display(array, n);  // Print the original array
    cout << endl;
    
    // Serial Execution
    clock_t start_serial = clock(); // Record start time
    mergesort_serial(array, 0, n - 1, n);   // Call serial merge sort function
    clock_t stop_serial = clock();  // Record stop time
    cout << "Final Array (Serial): ";
    display(array, n);  // Print the sorted array
    cout << endl;
    cout << "Time required for serial execution: " << (double)(stop_serial - start_serial) << " ms" << endl; // Print execution time
    
    // Reset array for parallel execution
    srand(time(NULL));  // Seed the random number generator again with current time
    for (int i = 0; i < n; i++) {
        array[i] = rand() % 32; // Generate random numbers between 0 and 31
    }

    // Parallel Execution
    clock_t start_parallel = clock();   // Record start time
    mergesort_parallel(array, 0, n - 1, n); // Call parallel merge sort function
    clock_t stop_parallel = clock();    // Record stop time
    cout << "Final Array (Parallel): ";
    display(array, n);  // Print the sorted array
    cout << endl;
    cout << "Time required for parallel execution: " << (double)(stop_parallel - start_parallel) << " ms" << endl; // Print execution time
    
    return 0;   // Return 0 to indicate successful termination
}
